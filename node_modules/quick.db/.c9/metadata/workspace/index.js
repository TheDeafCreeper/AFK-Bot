{"changed":false,"filter":false,"title":"index.js","tooltip":"/index.js","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":34,"column":49},"end":{"row":34,"column":50},"action":"insert","lines":[" "],"id":29}],[{"start":{"row":34,"column":50},"end":{"row":34,"column":51},"action":"insert","lines":["="],"id":30}],[{"start":{"row":34,"column":51},"end":{"row":34,"column":52},"action":"insert","lines":[" "],"id":31}],[{"start":{"row":34,"column":52},"end":{"row":34,"column":53},"action":"insert","lines":["r"],"id":32}],[{"start":{"row":34,"column":53},"end":{"row":34,"column":54},"action":"insert","lines":["e"],"id":33}],[{"start":{"row":34,"column":53},"end":{"row":34,"column":54},"action":"remove","lines":["e"],"id":34}],[{"start":{"row":34,"column":52},"end":{"row":34,"column":53},"action":"remove","lines":["r"],"id":35}],[{"start":{"row":34,"column":52},"end":{"row":34,"column":54},"action":"insert","lines":["[]"],"id":36}],[{"start":{"row":34,"column":53},"end":{"row":34,"column":54},"action":"insert","lines":["r"],"id":37}],[{"start":{"row":34,"column":54},"end":{"row":34,"column":55},"action":"insert","lines":["e"],"id":38}],[{"start":{"row":34,"column":53},"end":{"row":34,"column":55},"action":"remove","lines":["re"],"id":39},{"start":{"row":34,"column":53},"end":{"row":34,"column":59},"action":"insert","lines":["result"]}],[{"start":{"row":34,"column":59},"end":{"row":34,"column":60},"action":"insert","lines":[";"],"id":40}],[{"start":{"row":34,"column":59},"end":{"row":34,"column":60},"action":"remove","lines":[";"],"id":41}],[{"start":{"row":34,"column":60},"end":{"row":34,"column":61},"action":"insert","lines":[";"],"id":42}],[{"start":{"row":32,"column":203},"end":{"row":33,"column":0},"action":"insert","lines":["",""],"id":43},{"start":{"row":33,"column":0},"end":{"row":33,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":33,"column":12},"end":{"row":33,"column":13},"action":"insert","lines":["i"],"id":44}],[{"start":{"row":33,"column":13},"end":{"row":33,"column":14},"action":"insert","lines":["f"],"id":45}],[{"start":{"row":33,"column":14},"end":{"row":33,"column":16},"action":"insert","lines":["()"],"id":46}],[{"start":{"row":33,"column":15},"end":{"row":33,"column":16},"action":"insert","lines":["!"],"id":47}],[{"start":{"row":33,"column":16},"end":{"row":33,"column":17},"action":"insert","lines":["a"],"id":48}],[{"start":{"row":33,"column":16},"end":{"row":33,"column":17},"action":"remove","lines":["a"],"id":49}],[{"start":{"row":33,"column":16},"end":{"row":33,"column":17},"action":"insert","lines":["A"],"id":50}],[{"start":{"row":33,"column":17},"end":{"row":33,"column":18},"action":"insert","lines":["r"],"id":51}],[{"start":{"row":33,"column":16},"end":{"row":33,"column":18},"action":"remove","lines":["Ar"],"id":52},{"start":{"row":33,"column":16},"end":{"row":33,"column":23},"action":"insert","lines":["Array()"]}],[{"start":{"row":33,"column":21},"end":{"row":33,"column":23},"action":"remove","lines":["()"],"id":53}],[{"start":{"row":33,"column":21},"end":{"row":33,"column":22},"action":"insert","lines":["."],"id":54}],[{"start":{"row":33,"column":22},"end":{"row":33,"column":23},"action":"insert","lines":["i"],"id":55}],[{"start":{"row":33,"column":23},"end":{"row":33,"column":24},"action":"insert","lines":["s"],"id":56}],[{"start":{"row":33,"column":22},"end":{"row":33,"column":24},"action":"remove","lines":["is"],"id":57},{"start":{"row":33,"column":22},"end":{"row":33,"column":31},"action":"insert","lines":["isArray()"]}],[{"start":{"row":33,"column":30},"end":{"row":33,"column":31},"action":"insert","lines":["r"],"id":58}],[{"start":{"row":33,"column":31},"end":{"row":33,"column":32},"action":"insert","lines":["e"],"id":59}],[{"start":{"row":33,"column":30},"end":{"row":33,"column":32},"action":"remove","lines":["re"],"id":60},{"start":{"row":33,"column":30},"end":{"row":33,"column":37},"action":"insert","lines":["realObj"]}],[{"start":{"row":33,"column":37},"end":{"row":33,"column":38},"action":"insert","lines":["."],"id":61}],[{"start":{"row":33,"column":38},"end":{"row":33,"column":39},"action":"insert","lines":["a"],"id":62}],[{"start":{"row":33,"column":38},"end":{"row":33,"column":39},"action":"remove","lines":["a"],"id":63},{"start":{"row":33,"column":38},"end":{"row":33,"column":42},"action":"insert","lines":["args"]}],[{"start":{"row":33,"column":44},"end":{"row":33,"column":45},"action":"insert","lines":[" "],"id":64}],[{"start":{"row":33,"column":45},"end":{"row":33,"column":46},"action":"insert","lines":["r"],"id":65}],[{"start":{"row":33,"column":46},"end":{"row":33,"column":47},"action":"insert","lines":["e"],"id":66}],[{"start":{"row":33,"column":45},"end":{"row":33,"column":47},"action":"remove","lines":["re"],"id":67},{"start":{"row":33,"column":45},"end":{"row":33,"column":52},"action":"insert","lines":["realObj"]}],[{"start":{"row":33,"column":52},"end":{"row":33,"column":53},"action":"insert","lines":["."],"id":68}],[{"start":{"row":33,"column":53},"end":{"row":33,"column":54},"action":"insert","lines":["a"],"id":69}],[{"start":{"row":33,"column":53},"end":{"row":33,"column":54},"action":"remove","lines":["a"],"id":70},{"start":{"row":33,"column":53},"end":{"row":33,"column":57},"action":"insert","lines":["args"]}],[{"start":{"row":33,"column":57},"end":{"row":33,"column":58},"action":"insert","lines":[" "],"id":71}],[{"start":{"row":33,"column":58},"end":{"row":33,"column":59},"action":"insert","lines":["="],"id":72}],[{"start":{"row":33,"column":59},"end":{"row":33,"column":60},"action":"insert","lines":[" "],"id":73}],[{"start":{"row":33,"column":60},"end":{"row":33,"column":62},"action":"insert","lines":["[]"],"id":74}],[{"start":{"row":33,"column":61},"end":{"row":33,"column":62},"action":"insert","lines":["r"],"id":75}],[{"start":{"row":33,"column":62},"end":{"row":33,"column":63},"action":"insert","lines":["e"],"id":76}],[{"start":{"row":33,"column":61},"end":{"row":33,"column":63},"action":"remove","lines":["re"],"id":77},{"start":{"row":33,"column":61},"end":{"row":33,"column":63},"action":"insert","lines":["re"]}],[{"start":{"row":33,"column":63},"end":{"row":33,"column":64},"action":"insert","lines":["."],"id":78}],[{"start":{"row":33,"column":63},"end":{"row":33,"column":64},"action":"remove","lines":["."],"id":79}],[{"start":{"row":33,"column":63},"end":{"row":33,"column":64},"action":"insert","lines":["a"],"id":80}],[{"start":{"row":33,"column":61},"end":{"row":33,"column":64},"action":"remove","lines":["rea"],"id":81},{"start":{"row":33,"column":61},"end":{"row":33,"column":68},"action":"insert","lines":["realObj"]}],[{"start":{"row":33,"column":68},"end":{"row":33,"column":69},"action":"insert","lines":["."],"id":82}],[{"start":{"row":33,"column":69},"end":{"row":33,"column":70},"action":"insert","lines":["a"],"id":83}],[{"start":{"row":33,"column":69},"end":{"row":33,"column":70},"action":"remove","lines":["a"],"id":84},{"start":{"row":33,"column":69},"end":{"row":33,"column":73},"action":"insert","lines":["args"]}],[{"start":{"row":33,"column":74},"end":{"row":33,"column":75},"action":"insert","lines":[";"],"id":85}],[{"start":{"row":39,"column":34},"end":{"row":40,"column":0},"action":"insert","lines":["",""],"id":86},{"start":{"row":40,"column":0},"end":{"row":40,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":40,"column":16},"end":{"row":40,"column":17},"action":"insert","lines":["i"],"id":87}],[{"start":{"row":40,"column":17},"end":{"row":40,"column":18},"action":"insert","lines":["f"],"id":88}],[{"start":{"row":40,"column":18},"end":{"row":40,"column":20},"action":"insert","lines":["()"],"id":89}],[{"start":{"row":40,"column":19},"end":{"row":40,"column":20},"action":"insert","lines":["!"],"id":90}],[{"start":{"row":40,"column":20},"end":{"row":40,"column":21},"action":"insert","lines":["A"],"id":91}],[{"start":{"row":40,"column":21},"end":{"row":40,"column":22},"action":"insert","lines":["r"],"id":92}],[{"start":{"row":40,"column":20},"end":{"row":40,"column":22},"action":"remove","lines":["Ar"],"id":93},{"start":{"row":40,"column":20},"end":{"row":40,"column":27},"action":"insert","lines":["Array()"]}],[{"start":{"row":40,"column":25},"end":{"row":40,"column":27},"action":"remove","lines":["()"],"id":94}],[{"start":{"row":40,"column":25},"end":{"row":40,"column":26},"action":"insert","lines":["."],"id":95}],[{"start":{"row":40,"column":26},"end":{"row":40,"column":27},"action":"insert","lines":["s"],"id":96}],[{"start":{"row":40,"column":26},"end":{"row":40,"column":27},"action":"remove","lines":["s"],"id":97}],[{"start":{"row":40,"column":26},"end":{"row":40,"column":27},"action":"insert","lines":["s"],"id":98}],[{"start":{"row":40,"column":26},"end":{"row":40,"column":27},"action":"remove","lines":["s"],"id":99}],[{"start":{"row":40,"column":26},"end":{"row":40,"column":27},"action":"insert","lines":["i"],"id":100}],[{"start":{"row":40,"column":27},"end":{"row":40,"column":28},"action":"insert","lines":["s"],"id":101}],[{"start":{"row":40,"column":26},"end":{"row":40,"column":28},"action":"remove","lines":["is"],"id":102},{"start":{"row":40,"column":26},"end":{"row":40,"column":35},"action":"insert","lines":["isArray()"]}],[{"start":{"row":40,"column":34},"end":{"row":40,"column":35},"action":"insert","lines":["e"],"id":103}],[{"start":{"row":40,"column":35},"end":{"row":40,"column":36},"action":"insert","lines":["e"],"id":104}],[{"start":{"row":40,"column":35},"end":{"row":40,"column":36},"action":"remove","lines":["e"],"id":105}],[{"start":{"row":40,"column":35},"end":{"row":40,"column":36},"action":"insert","lines":["r"],"id":106}],[{"start":{"row":40,"column":36},"end":{"row":40,"column":37},"action":"insert","lines":["r"],"id":107}],[{"start":{"row":40,"column":37},"end":{"row":40,"column":38},"action":"insert","lines":["o"],"id":108}],[{"start":{"row":40,"column":38},"end":{"row":40,"column":39},"action":"insert","lines":["r"],"id":109}],[{"start":{"row":40,"column":38},"end":{"row":40,"column":39},"action":"remove","lines":["r"],"id":110}],[{"start":{"row":40,"column":37},"end":{"row":40,"column":38},"action":"remove","lines":["o"],"id":111}],[{"start":{"row":40,"column":36},"end":{"row":40,"column":37},"action":"remove","lines":["r"],"id":112}],[{"start":{"row":40,"column":36},"end":{"row":40,"column":37},"action":"insert","lines":["r"],"id":113}],[{"start":{"row":40,"column":39},"end":{"row":40,"column":40},"action":"insert","lines":[" "],"id":114}],[{"start":{"row":40,"column":40},"end":{"row":40,"column":41},"action":"insert","lines":["e"],"id":115}],[{"start":{"row":40,"column":41},"end":{"row":40,"column":42},"action":"insert","lines":["r"],"id":116}],[{"start":{"row":40,"column":42},"end":{"row":40,"column":43},"action":"insert","lines":["r"],"id":117}],[{"start":{"row":40,"column":43},"end":{"row":40,"column":44},"action":"insert","lines":[" "],"id":118}],[{"start":{"row":40,"column":44},"end":{"row":40,"column":45},"action":"insert","lines":["="],"id":119}],[{"start":{"row":40,"column":45},"end":{"row":40,"column":46},"action":"insert","lines":[" "],"id":120}],[{"start":{"row":40,"column":46},"end":{"row":40,"column":48},"action":"insert","lines":["[]"],"id":121}],[{"start":{"row":40,"column":47},"end":{"row":40,"column":48},"action":"insert","lines":["e"],"id":122}],[{"start":{"row":40,"column":48},"end":{"row":40,"column":49},"action":"insert","lines":["r"],"id":123}],[{"start":{"row":40,"column":49},"end":{"row":40,"column":50},"action":"insert","lines":["r"],"id":124}],[{"start":{"row":40,"column":51},"end":{"row":40,"column":52},"action":"insert","lines":[";"],"id":125}],[{"start":{"row":1,"column":34},"end":{"row":1,"column":44},"action":"remove","lines":[".verbose()"],"id":126,"ignore":true}],[{"start":{"row":0,"column":0},"end":{"row":533,"column":0},"action":"remove","lines":["// Dependencies","const sqlite3 = require('sqlite3');","","/* "," * Thank you for using quick.db!"," * Author: TrueXPixels (youtube.com/c/TrueXPixels)"," * Queue System: Zelak312 (Zelak#6169)"," * Comments for the Queue System: Zelak312 (Zelak#6169)"," */"," "," /* * * * * * * * * * * * * "," *               *         *"," *  TrueXPixels  *  Zelak  *"," *               *         *"," * * * * * * * * * * * * * */ ","","// Queue System","//I will remake the queue system since I fill like it would","//also I didn't know if you wanted to have it on all none debug function but I made it, Sry if it wasn't this :(","let queue = [];","","function executeQueue(object, queue) { //The executeQueue function will be called all the time there would need to queue up a function or to get the next function in the queue","    if (object) { //When I queue up the function the parameter object would be defined, if it's not queuing up something and just executing object would be undefined","        queue.push(object); //here I check if object is defined to queue it","        if (queue.length > 1) return; // after I look if it's the first element in the list if it's not the first then I return so the queue part ends here if there is already something in the queue","    }","    switch (queue.length) { // this works like a if statement so it takes the queue.length","        case 0: // if the queue.length == 0 then it execte the code here","            // No more functions in the queue","            break;","","        default: // the default part is actiavted when the other cases are not valid so in this case if queue.length != 0","            let realObj = object ? object : queue[0]; //since this function queue up the function and dont return if its the first element I look if object is defined or I take the first fun in the queue","            if(!Array.isArray(realObj.args)) realObj.args = [realObj.args];","            tools[realObj.fun](...realObj.args).then((...result) => { //there it only execute the function in the tools variable with the args","                if(!Array.isArray(result)) result = [result];","                realObj.innerFunc[0](...result); //this will resolve the promise you passed in with the innerFunc proprety","                queue.shift(); // get the first elment of the array out so it pass to the next function","                executeQueue(null, queue); // re execute the queue without the object parameter so this will not queue up only execute the queue","            }).catch((...err) => {","                if(!Array.isArray(err)) err = [err];","                realObj.innerFunc[1](...err); // this will reject the error so you can use .catch same thing has resolve","                queue.shift(); // same thing has higher","                executeQueue(null, queue); // here too","            });","    }","} // NOTE the 3 dots ex: ...result only means that if there is more then one parameter it will get them all / or it you pass it as a parameter it will put them all like separated args","","var tools = module.exports = {","","    fetchObject: function(ID) {","        return new Promise((resolve, error) => { // I will just format this because its painful","            executeQueue({","                \"fun\": \"fetchObjectDebug\", // this is the function to execute","                \"args\": [ID], // this is the array of args you need so if you have ID, lol, what like args it would be [ID, lol, what]","                \"innerFunc\": [resolve, error] // this is to pass the promise because you need to resolve() or error() it so I pass it on the object so I can call them directly in the executeQueue function and it will resolve or error for the user","            }, queue); // here I pass the queue ","","            // here you pass every args the execute function will need","        });","    },","","    setArray: function(ID, array) {","","        return new Promise((resolve, error) => {","            executeQueue({ \"fun\": \"setArrayDebug\", \"args\": [ID, array], \"innerFunc\": [resolve, error] }, queue);","        });","","    },","","    fetchArray: function(ID) {","","        return new Promise((resolve, error) => {","            executeQueue({ \"fun\": \"fetchArrayDebug\", \"args\": [ID], \"innerFunc\": [resolve, error] }, queue);","        });","","    },","","    updateValue: function(ID, increase) {","","        return new Promise((resolve, error) => {","            executeQueue({ \"fun\": \"updateValueDebug\", \"args\": [ID, increase], \"innerFunc\": [resolve, error] }, queue);","        });","","    },","","    updateText: function(ID, text) {","","        return new Promise((resolve, error) => {","            executeQueue({ \"fun\": \"updateTextDebug\", \"args\": [ID, text], \"innerFunc\": [resolve, error] }, queue);","        });","","    },","","    // Ignore the ones below","","    setArrayDebug: function(ID, array) {","        const getInfo = new Promise((resolve, error) => {","","            // Check if array is an object","            if (typeof array !== 'object') {","                console.log('ARRAY is NOT AN ARRAY');","                return error('ERROR: ARRAY is NOT AN ARRAY')","            }","","            let db;","            let response;","            let arrayKey;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./arrays.sqlite', createTable);","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS arrays (ID TEXT, array TEXT)\");","                checkForKey()","            }","","            function checkForKey() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM arrays WHERE ID = (?)`, 'SECRET_ARRAYKEY_DONOTDELETE', function(err, row) {","                    if (!row || row.array === 'none') { // Run if row not found...","                        insertKey()","                    }","                    else { // Run if row found...","                        arrayKey = row.array","                        checkIfCreated()","                    }","                })","","            }","","            function insertKey() { // Create an empty row w/ ID","","                let key = ''","                let possible = 'ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρςστυφχψωϑϒϖ–—‚\"\"„†‡•…‰‾€Π™←↑→↓↔↵⇐⇑⇒⇓⇔∀∂∃∅∇∈∉∋∏∑−∗√∝∞∠∧∨∩∪∫∴∼≅≈≠≡≤≥⊂⊃⊄⊆⊇⊕⊗⊥⋅⌈⌉⌊⌋〈〉◊♠♣♥♦ŒœŠšŸƒ'","                for (var i = 0; i < 15; i++) key += possible.charAt(Math.floor(Math.random() * possible.length));","","                db.run(\"INSERT INTO arrays (ID,array) VALUES (?,?)\", 'SECRET_ARRAYKEY_DONOTDELETE', key, checkForKey())","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM arrays WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) {","                        insertRows()","                    }","                    else {","","                        let newArray = array.join(arrayKey)","","                        db.run(`UPDATE arrays SET array = (?) WHERE ID = (?)`, newArray, ID);","                        db.get(`SELECT * FROM arrays WHERE ID = (?)`, ID, function(err, row) {","                            response = row.array.split(arrayKey);","                            returnDb()","                        })","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO arrays (ID,array) VALUES (?,?)\", ID, \"\", checkIfCreated)","            }","","            function returnDb() { // Returns Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo;","","    },","","    fetchArrayDebug: function(ID) {","        const getInfo = new Promise((resolve) => {","","            let db;","            let response;","            let arrayKey;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./arrays.sqlite', createTable)","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS arrays (ID TEXT, array TEXT)\")","                checkForKey()","            }","","            function checkForKey() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM arrays WHERE ID = (?)`, 'SECRET_ARRAYKEY_DONOTDELETE', function(err, row) {","                    if (!row || row.array === 'none') { // Run if row not found...","                        insertKey()","                    }","                    else { // Run if row found...","                        arrayKey = row.array","                        checkIfCreated()","                    }","                })","","            }","","            function insertKey() { // Create an empty row w/ ID","","                let key = ''","                let possible = 'ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρςστυφχψωϑϒϖ–—‚\"\"„†‡•…‰‾€Π™←↑→↓↔↵⇐⇑⇒⇓⇔∀∂∃∅∇∈∉∋∏∑−∗√∝∞∠∧∨∩∪∫∴∼≅≈≠≡≤≥⊂⊃⊄⊆⊇⊕⊗⊥⋅⌈⌉⌊⌋〈〉◊♠♣♥♦ŒœŠšŸƒ'","                for (var i = 0; i < 15; i++) key += possible.charAt(Math.floor(Math.random() * possible.length));","","                db.run(\"INSERT INTO arrays (ID,array) VALUES (?,?)\", 'SECRET_ARRAYKEY_DONOTDELETE', key, checkForKey())","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM arrays WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) { // Run if row not found...","                        insertRows()","                    }","                    else { // Run if row found...","                        response = row.array.split(arrayKey);","                        returnDb()","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO arrays (ID,array) VALUES (?,?)\", ID, \"\", checkIfCreated)","            }","","            function returnDb() { // Return Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo","","    },","","    updateValueDebug: function(ID, increase) {","","        const getInfo = new Promise((resolve, error) => {","","            // Turns increase into a number automatically","            increase = parseInt(increase);","","            // Check if increase is a number","            if (isNaN(increase)) {","                console.log('INCREASE VALUE is NOT A NUMBER');","                return error('ERROR: INCREASE VALUE is NOT A NUMBER')","            }","","            let db;","            let response;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./database.sqlite', createTable)","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\")","                checkIfCreated()","            }","","            function checkIfCreated() { // Check if row exists w/ ID","                db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","","                    if (!row) { // Run if it doesn't exist...","                        insertRows()","                    }","                    else { // Run if it does exist...","                        db.run(`UPDATE database SET value = (?) WHERE ID = (?)`, row.value + increase, ID);","                        db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                            response = row;","                            returnDb()","                        })","                    }","","                })","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","            }","","            function returnDb() { // Return Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo","","    },","","    fetchObjectDebug: function(ID) {","        const getInfo = new Promise((resolve) => {","","            let db;","            let response;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./database.sqlite', createTable)","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\", checkIfCreated)","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) { // Run if row not found...","                        insertRows()","                    }","                    else { // Run if row found...","                        response = row;","                        returnDb()","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","            }","","            function returnDb() { // Return Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo","","    },","","    updateTextDebug: function(ID, text) {","        const getInfo = new Promise((resolve, error) => {","","            // Check if text is a string","            if (typeof text !== 'string') {","                console.log('TEXT is NOT A STRING');","                return error('ERROR: TEXT is NOT A STRING')","            }","","            let db;","            let response;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./database.sqlite', createTable);","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\", checkIfCreated);","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) {","                        insertRows()","                    }","                    else {","                        db.run(`UPDATE database SET text = (?) WHERE ID = (?)`, text, ID);","                        db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                            response = row;","                            returnDb()","                        })","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","            }","","            function returnDb() { // Returns Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo;","","    },","","    fetchValue: function(ID) {","","        console.log(\"\\nQUICK.DB WARNING: 'fetchValue(ID).then(i => {})' is deprecated. Please use 'fetchObject(ID).then(i => {})\")","        console.log(\"QUICK.DB WARNING: 'fetchValue(ID).then(i => {})' is deprecated. Please use 'fetchObject(ID).then(i => {})\\n\")","","        const getInfo = new Promise((resolve) => {","","            let db;","            let response;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./database.sqlite', createTable)","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\", checkIfCreated)","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) { // Run if row not found...","                        insertRows()","                    }","                    else { // Run if row found...","                        response = row;","                        returnDb()","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","            }","","            function returnDb() { // Return Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo","","    }","","    /* Disabled","        fetchTop: function(column, amount) { // Column == value, or text","","            const getInfo = new Promise((resolve) => {","","                // Return Statements","                if (column.toUpperCase() !== 'VALUE'.toUpperCase() || column.toUpperCase() !== 'TEXT'.toUpperCase()) {","                    console.log('Quick.db Error w/ fetchTop: Column can only be (VALUE, TEXT).')","                    return error('Quick.db Error w/ fetchTop: Column can only be (VALUE, TEXT).')","                }","","                if (isNaN(amount)) {","                    console.log('Quick.db Error w/ fetchTop: amount is not an integer.')","                    return error('Quick.db Error w/ fetchTop: amount is not an integer.')","                }","","","                let db;","                let response;","","                function createDb() { // Create Database Chain","                    db = new sqlite3.Database('./database.sqlite', createTable)","                }","","                function createTable() { // Create table if it doesn't exist","                    db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\", checkIfCreated)","                }","","                function checkIfCreated() { // Check if row exists w/ ID","","                    db.get(`SELECT * FROM database ORDER BY (?) DESC LIMIT (?)`, column, amount, function(err, rows) {","                        if (!rows) { // Run if row not found...","                            insertRows()","                        }","                        else { // Run if row found...","","                            function asyncFunction(item, callback) {","                                setTimeout(() => {","                                    console.log(`Parsed: ${item}`)","                                    callback();","                                }, 100)","                            }","","                            let requests = rows.forEach(item => {","                                return new Promise((resolve) => {","                                    asyncFunction(item, resolve);","                                });","                            })","","                            requests.then(() => {","                                response = rows","                                returnDb()","                            })","","                        }","                    })","","                }","","                function insertRows() { // Create an empty row w/ ID","                    db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","                }","","                function returnDb() { // Return Row","                    db.close();","                    return resolve(response)","                }","","                createDb()","","            });","","            return getInfo","","        }","    */","","};",""],"id":127,"ignore":true},{"start":{"row":0,"column":0},"end":{"row":530,"column":0},"action":"insert","lines":["// Dependencies","const sqlite3 = require('sqlite3').verbose();","","/* "," * Thank you for using quick.db!"," * Author: TrueXPixels (youtube.com/c/TrueXPixels)"," * Queue System: Zelak312 (Zelak#6169)"," * Comments for the Queue System: Zelak312 (Zelak#6169)"," */"," "," /* * * * * * * * * * * * * "," *               *         *"," *  TrueXPixels  *  Zelak  *"," *               *         *"," * * * * * * * * * * * * * */ ","","// Queue System","//I will remake the queue system since I fill like it would","//also I didn't know if you wanted to have it on all none debug function but I made it, Sry if it wasn't this :(","let queue = [];","","function executeQueue(object, queue) { //The executeQueue function will be called all the time there would need to queue up a function or to get the next function in the queue","    if (object) { //When I queue up the function the parameter object would be defined, if it's not queuing up something and just executing object would be undefined","        queue.push(object); //here I check if object is defined to queue it","        if (queue.length > 1) return; // after I look if it's the first element in the list if it's not the first then I return so the queue part ends here if there is already something in the queue","    }","    switch (queue.length) { // this works like a if statement so it takes the queue.length","        case 0: // if the queue.length == 0 then it execte the code here","            // No more functions in the queue","            break;","","        default: // the default part is actiavted when the other cases are not valid so in this case if queue.length != 0","            let realObj = object ? object : queue[0]; //since this function queue up the function and dont return if its the first element I look if object is defined or I take the first fun in the queue","            tools[realObj.fun](...realObj.args).then((...result) => { //there it only execute the function in the tools variable with the args","                realObj.innerFunc[0](...result); //this will resolve the promise you passed in with the innerFunc proprety","                queue.shift(); // get the first elment of the array out so it pass to the next function","                executeQueue(null, queue); // re execute the queue without the object parameter so this will not queue up only execute the queue","            }).catch((...err) => {","                realObj.innerFunc[1](...err); // this will reject the error so you can use .catch same thing has resolve","                queue.shift(); // same thing has higher","                executeQueue(null, queue); // here too","            });","    }","} // NOTE the 3 dots ex: ...result only means that if there is more then one parameter it will get them all / or it you pass it as a parameter it will put them all like separated args","","var tools = module.exports = {","","    fetchObject: function(ID) {","        return new Promise((resolve, error) => { // I will just format this because its painful","            executeQueue({","                \"fun\": \"fetchObjectDebug\", // this is the function to execute","                \"args\": [ID], // this is the array of args you need so if you have ID, lol, what like args it would be [ID, lol, what]","                \"innerFunc\": [resolve, error] // this is to pass the promise because you need to resolve() or error() it so I pass it on the object so I can call them directly in the executeQueue function and it will resolve or error for the user","            }, queue); // here I pass the queue ","","            // here you pass every args the execute function will need","        });","    },","","    setArray: function(ID, array) {","","        return new Promise((resolve, error) => {","            executeQueue({ \"fun\": \"setArrayDebug\", \"args\": [ID, array], \"innerFunc\": [resolve, error] }, queue);","        });","","    },","","    fetchArray: function(ID) {","","        return new Promise((resolve, error) => {","            executeQueue({ \"fun\": \"fetchArrayDebug\", \"args\": [ID], \"innerFunc\": [resolve, error] }, queue);","        });","","    },","","    updateValue: function(ID, increase) {","","        return new Promise((resolve, error) => {","            executeQueue({ \"fun\": \"updateValueDebug\", \"args\": [ID, increase], \"innerFunc\": [resolve, error] }, queue);","        });","","    },","","    updateText: function(ID, text) {","","        return new Promise((resolve, error) => {","            executeQueue({ \"fun\": \"updateTextDebug\", \"args\": [ID, text], \"innerFunc\": [resolve, error] }, queue);","        });","","    },","","    // Ignore the ones below","","    setArrayDebug: function(ID, array) {","        const getInfo = new Promise((resolve, error) => {","","            // Check if array is an object","            if (typeof array !== 'object') {","                console.log('ARRAY is NOT AN ARRAY');","                return error('ERROR: ARRAY is NOT AN ARRAY')","            }","","            let db;","            let response;","            let arrayKey;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./arrays.sqlite', createTable);","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS arrays (ID TEXT, array TEXT)\");","                checkForKey()","            }","","            function checkForKey() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM arrays WHERE ID = (?)`, 'SECRET_ARRAYKEY_DONOTDELETE', function(err, row) {","                    if (!row || row.array === 'none') { // Run if row not found...","                        insertKey()","                    }","                    else { // Run if row found...","                        arrayKey = row.array","                        checkIfCreated()","                    }","                })","","            }","","            function insertKey() { // Create an empty row w/ ID","","                let key = ''","                let possible = 'ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρςστυφχψωϑϒϖ–—‚\"\"„†‡•…‰‾€Π™←↑→↓↔↵⇐⇑⇒⇓⇔∀∂∃∅∇∈∉∋∏∑−∗√∝∞∠∧∨∩∪∫∴∼≅≈≠≡≤≥⊂⊃⊄⊆⊇⊕⊗⊥⋅⌈⌉⌊⌋〈〉◊♠♣♥♦ŒœŠšŸƒ'","                for (var i = 0; i < 15; i++) key += possible.charAt(Math.floor(Math.random() * possible.length));","","                db.run(\"INSERT INTO arrays (ID,array) VALUES (?,?)\", 'SECRET_ARRAYKEY_DONOTDELETE', key, checkForKey())","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM arrays WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) {","                        insertRows()","                    }","                    else {","","                        let newArray = array.join(arrayKey)","","                        db.run(`UPDATE arrays SET array = (?) WHERE ID = (?)`, newArray, ID);","                        db.get(`SELECT * FROM arrays WHERE ID = (?)`, ID, function(err, row) {","                            response = row.array.split(arrayKey);","                            returnDb()","                        })","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO arrays (ID,array) VALUES (?,?)\", ID, \"\", checkIfCreated)","            }","","            function returnDb() { // Returns Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo;","","    },","","    fetchArrayDebug: function(ID) {","        const getInfo = new Promise((resolve) => {","","            let db;","            let response;","            let arrayKey;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./arrays.sqlite', createTable)","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS arrays (ID TEXT, array TEXT)\")","                checkForKey()","            }","","            function checkForKey() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM arrays WHERE ID = (?)`, 'SECRET_ARRAYKEY_DONOTDELETE', function(err, row) {","                    if (!row || row.array === 'none') { // Run if row not found...","                        insertKey()","                    }","                    else { // Run if row found...","                        arrayKey = row.array","                        checkIfCreated()","                    }","                })","","            }","","            function insertKey() { // Create an empty row w/ ID","","                let key = ''","                let possible = 'ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρςστυφχψωϑϒϖ–—‚\"\"„†‡•…‰‾€Π™←↑→↓↔↵⇐⇑⇒⇓⇔∀∂∃∅∇∈∉∋∏∑−∗√∝∞∠∧∨∩∪∫∴∼≅≈≠≡≤≥⊂⊃⊄⊆⊇⊕⊗⊥⋅⌈⌉⌊⌋〈〉◊♠♣♥♦ŒœŠšŸƒ'","                for (var i = 0; i < 15; i++) key += possible.charAt(Math.floor(Math.random() * possible.length));","","                db.run(\"INSERT INTO arrays (ID,array) VALUES (?,?)\", 'SECRET_ARRAYKEY_DONOTDELETE', key, checkForKey())","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM arrays WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) { // Run if row not found...","                        insertRows()","                    }","                    else { // Run if row found...","                        response = row.array.split(arrayKey);","                        returnDb()","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO arrays (ID,array) VALUES (?,?)\", ID, \"\", checkIfCreated)","            }","","            function returnDb() { // Return Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo","","    },","","    updateValueDebug: function(ID, increase) {","","        const getInfo = new Promise((resolve, error) => {","","            // Turns increase into a number automatically","            increase = parseInt(increase);","","            // Check if increase is a number","            if (isNaN(increase)) {","                console.log('INCREASE VALUE is NOT A NUMBER');","                return error('ERROR: INCREASE VALUE is NOT A NUMBER')","            }","","            let db;","            let response;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./database.sqlite', createTable)","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\")","                checkIfCreated()","            }","","            function checkIfCreated() { // Check if row exists w/ ID","                db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","","                    if (!row) { // Run if it doesn't exist...","                        insertRows()","                    }","                    else { // Run if it does exist...","                        db.run(`UPDATE database SET value = (?) WHERE ID = (?)`, row.value + increase, ID);","                        db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                            response = row;","                            returnDb()","                        })","                    }","","                })","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","            }","","            function returnDb() { // Return Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo","","    },","","    fetchObjectDebug: function(ID) {","        const getInfo = new Promise((resolve) => {","","            let db;","            let response;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./database.sqlite', createTable)","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\", checkIfCreated)","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) { // Run if row not found...","                        insertRows()","                    }","                    else { // Run if row found...","                        response = row;","                        returnDb()","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","            }","","            function returnDb() { // Return Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo","","    },","","    updateTextDebug: function(ID, text) {","        const getInfo = new Promise((resolve, error) => {","","            // Check if text is a string","            if (typeof text !== 'string') {","                console.log('TEXT is NOT A STRING');","                return error('ERROR: TEXT is NOT A STRING')","            }","","            let db;","            let response;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./database.sqlite', createTable);","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\", checkIfCreated);","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) {","                        insertRows()","                    }","                    else {","                        db.run(`UPDATE database SET text = (?) WHERE ID = (?)`, text, ID);","                        db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                            response = row;","                            returnDb()","                        })","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","            }","","            function returnDb() { // Returns Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo;","","    },","","    fetchValue: function(ID) {","","        console.log(\"\\nQUICK.DB WARNING: 'fetchValue(ID).then(i => {})' is deprecated. Please use 'fetchObject(ID).then(i => {})\")","        console.log(\"QUICK.DB WARNING: 'fetchValue(ID).then(i => {})' is deprecated. Please use 'fetchObject(ID).then(i => {})\\n\")","","        const getInfo = new Promise((resolve) => {","","            let db;","            let response;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./database.sqlite', createTable)","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\", checkIfCreated)","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) { // Run if row not found...","                        insertRows()","                    }","                    else { // Run if row found...","                        response = row;","                        returnDb()","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","            }","","            function returnDb() { // Return Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo","","    }","","    /* Disabled","        fetchTop: function(column, amount) { // Column == value, or text","","            const getInfo = new Promise((resolve) => {","","                // Return Statements","                if (column.toUpperCase() !== 'VALUE'.toUpperCase() || column.toUpperCase() !== 'TEXT'.toUpperCase()) {","                    console.log('Quick.db Error w/ fetchTop: Column can only be (VALUE, TEXT).')","                    return error('Quick.db Error w/ fetchTop: Column can only be (VALUE, TEXT).')","                }","","                if (isNaN(amount)) {","                    console.log('Quick.db Error w/ fetchTop: amount is not an integer.')","                    return error('Quick.db Error w/ fetchTop: amount is not an integer.')","                }","","","                let db;","                let response;","","                function createDb() { // Create Database Chain","                    db = new sqlite3.Database('./database.sqlite', createTable)","                }","","                function createTable() { // Create table if it doesn't exist","                    db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\", checkIfCreated)","                }","","                function checkIfCreated() { // Check if row exists w/ ID","","                    db.get(`SELECT * FROM database ORDER BY (?) DESC LIMIT (?)`, column, amount, function(err, rows) {","                        if (!rows) { // Run if row not found...","                            insertRows()","                        }","                        else { // Run if row found...","","                            function asyncFunction(item, callback) {","                                setTimeout(() => {","                                    console.log(`Parsed: ${item}`)","                                    callback();","                                }, 100)","                            }","","                            let requests = rows.forEach(item => {","                                return new Promise((resolve) => {","                                    asyncFunction(item, resolve);","                                });","                            })","","                            requests.then(() => {","                                response = rows","                                returnDb()","                            })","","                        }","                    })","","                }","","                function insertRows() { // Create an empty row w/ ID","                    db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","                }","","                function returnDb() { // Return Row","                    db.close();","                    return resolve(response)","                }","","                createDb()","","            });","","            return getInfo","","        }","    */","","};",""]}],[{"start":{"row":1,"column":34},"end":{"row":1,"column":44},"action":"remove","lines":[".verbose()"],"id":128,"ignore":true}],[{"start":{"row":0,"column":0},"end":{"row":530,"column":0},"action":"remove","lines":["// Dependencies","const sqlite3 = require('sqlite3');","","/* "," * Thank you for using quick.db!"," * Author: TrueXPixels (youtube.com/c/TrueXPixels)"," * Queue System: Zelak312 (Zelak#6169)"," * Comments for the Queue System: Zelak312 (Zelak#6169)"," */"," "," /* * * * * * * * * * * * * "," *               *         *"," *  TrueXPixels  *  Zelak  *"," *               *         *"," * * * * * * * * * * * * * */ ","","// Queue System","//I will remake the queue system since I fill like it would","//also I didn't know if you wanted to have it on all none debug function but I made it, Sry if it wasn't this :(","let queue = [];","","function executeQueue(object, queue) { //The executeQueue function will be called all the time there would need to queue up a function or to get the next function in the queue","    if (object) { //When I queue up the function the parameter object would be defined, if it's not queuing up something and just executing object would be undefined","        queue.push(object); //here I check if object is defined to queue it","        if (queue.length > 1) return; // after I look if it's the first element in the list if it's not the first then I return so the queue part ends here if there is already something in the queue","    }","    switch (queue.length) { // this works like a if statement so it takes the queue.length","        case 0: // if the queue.length == 0 then it execte the code here","            // No more functions in the queue","            break;","","        default: // the default part is actiavted when the other cases are not valid so in this case if queue.length != 0","            let realObj = object ? object : queue[0]; //since this function queue up the function and dont return if its the first element I look if object is defined or I take the first fun in the queue","            tools[realObj.fun](...realObj.args).then((...result) => { //there it only execute the function in the tools variable with the args","                realObj.innerFunc[0](...result); //this will resolve the promise you passed in with the innerFunc proprety","                queue.shift(); // get the first elment of the array out so it pass to the next function","                executeQueue(null, queue); // re execute the queue without the object parameter so this will not queue up only execute the queue","            }).catch((...err) => {","                realObj.innerFunc[1](...err); // this will reject the error so you can use .catch same thing has resolve","                queue.shift(); // same thing has higher","                executeQueue(null, queue); // here too","            });","    }","} // NOTE the 3 dots ex: ...result only means that if there is more then one parameter it will get them all / or it you pass it as a parameter it will put them all like separated args","","var tools = module.exports = {","","    fetchObject: function(ID) {","        return new Promise((resolve, error) => { // I will just format this because its painful","            executeQueue({","                \"fun\": \"fetchObjectDebug\", // this is the function to execute","                \"args\": [ID], // this is the array of args you need so if you have ID, lol, what like args it would be [ID, lol, what]","                \"innerFunc\": [resolve, error] // this is to pass the promise because you need to resolve() or error() it so I pass it on the object so I can call them directly in the executeQueue function and it will resolve or error for the user","            }, queue); // here I pass the queue ","","            // here you pass every args the execute function will need","        });","    },","","    setArray: function(ID, array) {","","        return new Promise((resolve, error) => {","            executeQueue({ \"fun\": \"setArrayDebug\", \"args\": [ID, array], \"innerFunc\": [resolve, error] }, queue);","        });","","    },","","    fetchArray: function(ID) {","","        return new Promise((resolve, error) => {","            executeQueue({ \"fun\": \"fetchArrayDebug\", \"args\": [ID], \"innerFunc\": [resolve, error] }, queue);","        });","","    },","","    updateValue: function(ID, increase) {","","        return new Promise((resolve, error) => {","            executeQueue({ \"fun\": \"updateValueDebug\", \"args\": [ID, increase], \"innerFunc\": [resolve, error] }, queue);","        });","","    },","","    updateText: function(ID, text) {","","        return new Promise((resolve, error) => {","            executeQueue({ \"fun\": \"updateTextDebug\", \"args\": [ID, text], \"innerFunc\": [resolve, error] }, queue);","        });","","    },","","    // Ignore the ones below","","    setArrayDebug: function(ID, array) {","        const getInfo = new Promise((resolve, error) => {","","            // Check if array is an object","            if (typeof array !== 'object') {","                console.log('ARRAY is NOT AN ARRAY');","                return error('ERROR: ARRAY is NOT AN ARRAY')","            }","","            let db;","            let response;","            let arrayKey;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./arrays.sqlite', createTable);","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS arrays (ID TEXT, array TEXT)\");","                checkForKey()","            }","","            function checkForKey() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM arrays WHERE ID = (?)`, 'SECRET_ARRAYKEY_DONOTDELETE', function(err, row) {","                    if (!row || row.array === 'none') { // Run if row not found...","                        insertKey()","                    }","                    else { // Run if row found...","                        arrayKey = row.array","                        checkIfCreated()","                    }","                })","","            }","","            function insertKey() { // Create an empty row w/ ID","","                let key = ''","                let possible = 'ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρςστυφχψωϑϒϖ–—‚\"\"„†‡•…‰‾€Π™←↑→↓↔↵⇐⇑⇒⇓⇔∀∂∃∅∇∈∉∋∏∑−∗√∝∞∠∧∨∩∪∫∴∼≅≈≠≡≤≥⊂⊃⊄⊆⊇⊕⊗⊥⋅⌈⌉⌊⌋〈〉◊♠♣♥♦ŒœŠšŸƒ'","                for (var i = 0; i < 15; i++) key += possible.charAt(Math.floor(Math.random() * possible.length));","","                db.run(\"INSERT INTO arrays (ID,array) VALUES (?,?)\", 'SECRET_ARRAYKEY_DONOTDELETE', key, checkForKey())","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM arrays WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) {","                        insertRows()","                    }","                    else {","","                        let newArray = array.join(arrayKey)","","                        db.run(`UPDATE arrays SET array = (?) WHERE ID = (?)`, newArray, ID);","                        db.get(`SELECT * FROM arrays WHERE ID = (?)`, ID, function(err, row) {","                            response = row.array.split(arrayKey);","                            returnDb()","                        })","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO arrays (ID,array) VALUES (?,?)\", ID, \"\", checkIfCreated)","            }","","            function returnDb() { // Returns Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo;","","    },","","    fetchArrayDebug: function(ID) {","        const getInfo = new Promise((resolve) => {","","            let db;","            let response;","            let arrayKey;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./arrays.sqlite', createTable)","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS arrays (ID TEXT, array TEXT)\")","                checkForKey()","            }","","            function checkForKey() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM arrays WHERE ID = (?)`, 'SECRET_ARRAYKEY_DONOTDELETE', function(err, row) {","                    if (!row || row.array === 'none') { // Run if row not found...","                        insertKey()","                    }","                    else { // Run if row found...","                        arrayKey = row.array","                        checkIfCreated()","                    }","                })","","            }","","            function insertKey() { // Create an empty row w/ ID","","                let key = ''","                let possible = 'ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρςστυφχψωϑϒϖ–—‚\"\"„†‡•…‰‾€Π™←↑→↓↔↵⇐⇑⇒⇓⇔∀∂∃∅∇∈∉∋∏∑−∗√∝∞∠∧∨∩∪∫∴∼≅≈≠≡≤≥⊂⊃⊄⊆⊇⊕⊗⊥⋅⌈⌉⌊⌋〈〉◊♠♣♥♦ŒœŠšŸƒ'","                for (var i = 0; i < 15; i++) key += possible.charAt(Math.floor(Math.random() * possible.length));","","                db.run(\"INSERT INTO arrays (ID,array) VALUES (?,?)\", 'SECRET_ARRAYKEY_DONOTDELETE', key, checkForKey())","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM arrays WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) { // Run if row not found...","                        insertRows()","                    }","                    else { // Run if row found...","                        response = row.array.split(arrayKey);","                        returnDb()","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO arrays (ID,array) VALUES (?,?)\", ID, \"\", checkIfCreated)","            }","","            function returnDb() { // Return Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo","","    },","","    updateValueDebug: function(ID, increase) {","","        const getInfo = new Promise((resolve, error) => {","","            // Turns increase into a number automatically","            increase = parseInt(increase);","","            // Check if increase is a number","            if (isNaN(increase)) {","                console.log('INCREASE VALUE is NOT A NUMBER');","                return error('ERROR: INCREASE VALUE is NOT A NUMBER')","            }","","            let db;","            let response;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./database.sqlite', createTable)","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\")","                checkIfCreated()","            }","","            function checkIfCreated() { // Check if row exists w/ ID","                db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","","                    if (!row) { // Run if it doesn't exist...","                        insertRows()","                    }","                    else { // Run if it does exist...","                        db.run(`UPDATE database SET value = (?) WHERE ID = (?)`, row.value + increase, ID);","                        db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                            response = row;","                            returnDb()","                        })","                    }","","                })","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","            }","","            function returnDb() { // Return Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo","","    },","","    fetchObjectDebug: function(ID) {","        const getInfo = new Promise((resolve) => {","","            let db;","            let response;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./database.sqlite', createTable)","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\", checkIfCreated)","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) { // Run if row not found...","                        insertRows()","                    }","                    else { // Run if row found...","                        response = row;","                        returnDb()","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","            }","","            function returnDb() { // Return Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo","","    },","","    updateTextDebug: function(ID, text) {","        const getInfo = new Promise((resolve, error) => {","","            // Check if text is a string","            if (typeof text !== 'string') {","                console.log('TEXT is NOT A STRING');","                return error('ERROR: TEXT is NOT A STRING')","            }","","            let db;","            let response;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./database.sqlite', createTable);","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\", checkIfCreated);","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) {","                        insertRows()","                    }","                    else {","                        db.run(`UPDATE database SET text = (?) WHERE ID = (?)`, text, ID);","                        db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                            response = row;","                            returnDb()","                        })","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","            }","","            function returnDb() { // Returns Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo;","","    },","","    fetchValue: function(ID) {","","        console.log(\"\\nQUICK.DB WARNING: 'fetchValue(ID).then(i => {})' is deprecated. Please use 'fetchObject(ID).then(i => {})\")","        console.log(\"QUICK.DB WARNING: 'fetchValue(ID).then(i => {})' is deprecated. Please use 'fetchObject(ID).then(i => {})\\n\")","","        const getInfo = new Promise((resolve) => {","","            let db;","            let response;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./database.sqlite', createTable)","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\", checkIfCreated)","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) { // Run if row not found...","                        insertRows()","                    }","                    else { // Run if row found...","                        response = row;","                        returnDb()","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","            }","","            function returnDb() { // Return Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo","","    }","","    /* Disabled","        fetchTop: function(column, amount) { // Column == value, or text","","            const getInfo = new Promise((resolve) => {","","                // Return Statements","                if (column.toUpperCase() !== 'VALUE'.toUpperCase() || column.toUpperCase() !== 'TEXT'.toUpperCase()) {","                    console.log('Quick.db Error w/ fetchTop: Column can only be (VALUE, TEXT).')","                    return error('Quick.db Error w/ fetchTop: Column can only be (VALUE, TEXT).')","                }","","                if (isNaN(amount)) {","                    console.log('Quick.db Error w/ fetchTop: amount is not an integer.')","                    return error('Quick.db Error w/ fetchTop: amount is not an integer.')","                }","","","                let db;","                let response;","","                function createDb() { // Create Database Chain","                    db = new sqlite3.Database('./database.sqlite', createTable)","                }","","                function createTable() { // Create table if it doesn't exist","                    db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\", checkIfCreated)","                }","","                function checkIfCreated() { // Check if row exists w/ ID","","                    db.get(`SELECT * FROM database ORDER BY (?) DESC LIMIT (?)`, column, amount, function(err, rows) {","                        if (!rows) { // Run if row not found...","                            insertRows()","                        }","                        else { // Run if row found...","","                            function asyncFunction(item, callback) {","                                setTimeout(() => {","                                    console.log(`Parsed: ${item}`)","                                    callback();","                                }, 100)","                            }","","                            let requests = rows.forEach(item => {","                                return new Promise((resolve) => {","                                    asyncFunction(item, resolve);","                                });","                            })","","                            requests.then(() => {","                                response = rows","                                returnDb()","                            })","","                        }","                    })","","                }","","                function insertRows() { // Create an empty row w/ ID","                    db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","                }","","                function returnDb() { // Return Row","                    db.close();","                    return resolve(response)","                }","","                createDb()","","            });","","            return getInfo","","        }","    */","","};",""],"id":129,"ignore":true},{"start":{"row":0,"column":0},"end":{"row":530,"column":0},"action":"insert","lines":["// Dependencies","const sqlite3 = require('sqlite3').verbose();","","/* "," * Thank you for using quick.db!"," * Author: TrueXPixels (youtube.com/c/TrueXPixels)"," * Queue System: Zelak312 (Zelak#6169)"," * Comments for the Queue System: Zelak312 (Zelak#6169)"," */"," "," /* * * * * * * * * * * * * "," *               *         *"," *  TrueXPixels  *  Zelak  *"," *               *         *"," * * * * * * * * * * * * * */ ","","// Queue System","//I will remake the queue system since I fill like it would","//also I didn't know if you wanted to have it on all none debug function but I made it, Sry if it wasn't this :(","let queue = [];","","function executeQueue(object, queue) { //The executeQueue function will be called all the time there would need to queue up a function or to get the next function in the queue","    if (object) { //When I queue up the function the parameter object would be defined, if it's not queuing up something and just executing object would be undefined","        queue.push(object); //here I check if object is defined to queue it","        if (queue.length > 1) return; // after I look if it's the first element in the list if it's not the first then I return so the queue part ends here if there is already something in the queue","    }","    switch (queue.length) { // this works like a if statement so it takes the queue.length","        case 0: // if the queue.length == 0 then it execte the code here","            // No more functions in the queue","            break;","","        default: // the default part is actiavted when the other cases are not valid so in this case if queue.length != 0","            let realObj = object ? object : queue[0]; //since this function queue up the function and dont return if its the first element I look if object is defined or I take the first fun in the queue","            tools[realObj.fun](...realObj.args).then((...result) => { //there it only execute the function in the tools variable with the args","                realObj.innerFunc[0](...result); //this will resolve the promise you passed in with the innerFunc proprety","                queue.shift(); // get the first elment of the array out so it pass to the next function","                executeQueue(null, queue); // re execute the queue without the object parameter so this will not queue up only execute the queue","            }).catch((...err) => {","                realObj.innerFunc[1](...err); // this will reject the error so you can use .catch same thing has resolve","                queue.shift(); // same thing has higher","                executeQueue(null, queue); // here too","            });","    }","} // NOTE the 3 dots ex: ...result only means that if there is more then one parameter it will get them all / or it you pass it as a parameter it will put them all like separated args","","var tools = module.exports = {","","    fetchObject: function(ID) {","        return new Promise((resolve, error) => { // I will just format this because its painful","            executeQueue({","                \"fun\": \"fetchObjectDebug\", // this is the function to execute","                \"args\": [ID], // this is the array of args you need so if you have ID, lol, what like args it would be [ID, lol, what]","                \"innerFunc\": [resolve, error] // this is to pass the promise because you need to resolve() or error() it so I pass it on the object so I can call them directly in the executeQueue function and it will resolve or error for the user","            }, queue); // here I pass the queue ","","            // here you pass every args the execute function will need","        });","    },","","    setArray: function(ID, array) {","","        return new Promise((resolve, error) => {","            executeQueue({ \"fun\": \"setArrayDebug\", \"args\": [ID, array], \"innerFunc\": [resolve, error] }, queue);","        });","","    },","","    fetchArray: function(ID) {","","        return new Promise((resolve, error) => {","            executeQueue({ \"fun\": \"fetchArrayDebug\", \"args\": [ID], \"innerFunc\": [resolve, error] }, queue);","        });","","    },","","    updateValue: function(ID, increase) {","","        return new Promise((resolve, error) => {","            executeQueue({ \"fun\": \"updateValueDebug\", \"args\": [ID, increase], \"innerFunc\": [resolve, error] }, queue);","        });","","    },","","    updateText: function(ID, text) {","","        return new Promise((resolve, error) => {","            executeQueue({ \"fun\": \"updateTextDebug\", \"args\": [ID, text], \"innerFunc\": [resolve, error] }, queue);","        });","","    },","","    // Ignore the ones below","","    setArrayDebug: function(ID, array) {","        const getInfo = new Promise((resolve, error) => {","","            // Check if array is an object","            if (typeof array !== 'object') {","                console.log('ARRAY is NOT AN ARRAY');","                return error('ERROR: ARRAY is NOT AN ARRAY')","            }","","            let db;","            let response;","            let arrayKey;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./arrays.sqlite', createTable);","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS arrays (ID TEXT, array TEXT)\");","                checkForKey()","            }","","            function checkForKey() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM arrays WHERE ID = (?)`, 'SECRET_ARRAYKEY_DONOTDELETE', function(err, row) {","                    if (!row || row.array === 'none') { // Run if row not found...","                        insertKey()","                    }","                    else { // Run if row found...","                        arrayKey = row.array","                        checkIfCreated()","                    }","                })","","            }","","            function insertKey() { // Create an empty row w/ ID","","                let key = ''","                let possible = 'ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρςστυφχψωϑϒϖ–—‚\"\"„†‡•…‰‾€Π™←↑→↓↔↵⇐⇑⇒⇓⇔∀∂∃∅∇∈∉∋∏∑−∗√∝∞∠∧∨∩∪∫∴���≅≈≠≡≤≥⊂⊃⊄⊆⊇⊕⊗⊥⋅⌈⌉⌊⌋〈〉◊♠♣♥♦ŒœŠšŸƒ'","                for (var i = 0; i < 15; i++) key += possible.charAt(Math.floor(Math.random() * possible.length));","","                db.run(\"INSERT INTO arrays (ID,array) VALUES (?,?)\", 'SECRET_ARRAYKEY_DONOTDELETE', key, checkForKey())","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM arrays WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) {","                        insertRows()","                    }","                    else {","","                        let newArray = array.join(arrayKey)","","                        db.run(`UPDATE arrays SET array = (?) WHERE ID = (?)`, newArray, ID);","                        db.get(`SELECT * FROM arrays WHERE ID = (?)`, ID, function(err, row) {","                            response = row.array.split(arrayKey);","                            returnDb()","                        })","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO arrays (ID,array) VALUES (?,?)\", ID, \"\", checkIfCreated)","            }","","            function returnDb() { // Returns Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo;","","    },","","    fetchArrayDebug: function(ID) {","        const getInfo = new Promise((resolve) => {","","            let db;","            let response;","            let arrayKey;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./arrays.sqlite', createTable)","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS arrays (ID TEXT, array TEXT)\")","                checkForKey()","            }","","            function checkForKey() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM arrays WHERE ID = (?)`, 'SECRET_ARRAYKEY_DONOTDELETE', function(err, row) {","                    if (!row || row.array === 'none') { // Run if row not found...","                        insertKey()","                    }","                    else { // Run if row found...","                        arrayKey = row.array","                        checkIfCreated()","                    }","                })","","            }","","            function insertKey() { // Create an empty row w/ ID","","                let key = ''","                let possible = 'ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρςστυφχψωϑϒϖ–—‚\"\"„†‡•…‰‾€Π™←↑→↓↔↵⇐⇑⇒⇓⇔∀∂∃∅∇∈∉∋∏∑−∗√∝∞∠∧∨∩∪∫∴∼≅≈≠≡≤≥⊂⊃⊄⊆⊇⊕⊗⊥⋅⌈⌉⌊⌋〈〉◊♠♣♥♦ŒœŠšŸƒ'","                for (var i = 0; i < 15; i++) key += possible.charAt(Math.floor(Math.random() * possible.length));","","                db.run(\"INSERT INTO arrays (ID,array) VALUES (?,?)\", 'SECRET_ARRAYKEY_DONOTDELETE', key, checkForKey())","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM arrays WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) { // Run if row not found...","                        insertRows()","                    }","                    else { // Run if row found...","                        response = row.array.split(arrayKey);","                        returnDb()","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO arrays (ID,array) VALUES (?,?)\", ID, \"\", checkIfCreated)","            }","","            function returnDb() { // Return Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo","","    },","","    updateValueDebug: function(ID, increase) {","","        const getInfo = new Promise((resolve, error) => {","","            // Turns increase into a number automatically","            increase = parseInt(increase);","","            // Check if increase is a number","            if (isNaN(increase)) {","                console.log('INCREASE VALUE is NOT A NUMBER');","                return error('ERROR: INCREASE VALUE is NOT A NUMBER')","            }","","            let db;","            let response;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./database.sqlite', createTable)","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\")","                checkIfCreated()","            }","","            function checkIfCreated() { // Check if row exists w/ ID","                db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","","                    if (!row) { // Run if it doesn't exist...","                        insertRows()","                    }","                    else { // Run if it does exist...","                        db.run(`UPDATE database SET value = (?) WHERE ID = (?)`, row.value + increase, ID);","                        db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                            response = row;","                            returnDb()","                        })","                    }","","                })","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","            }","","            function returnDb() { // Return Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo","","    },","","    fetchObjectDebug: function(ID) {","        const getInfo = new Promise((resolve) => {","","            let db;","            let response;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./database.sqlite', createTable)","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\", checkIfCreated)","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) { // Run if row not found...","                        insertRows()","                    }","                    else { // Run if row found...","                        response = row;","                        returnDb()","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","            }","","            function returnDb() { // Return Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo","","    },","","    updateTextDebug: function(ID, text) {","        const getInfo = new Promise((resolve, error) => {","","            // Check if text is a string","            if (typeof text !== 'string') {","                console.log('TEXT is NOT A STRING');","                return error('ERROR: TEXT is NOT A STRING')","            }","","            let db;","            let response;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./database.sqlite', createTable);","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\", checkIfCreated);","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) {","                        insertRows()","                    }","                    else {","                        db.run(`UPDATE database SET text = (?) WHERE ID = (?)`, text, ID);","                        db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                            response = row;","                            returnDb()","                        })","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","            }","","            function returnDb() { // Returns Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo;","","    },","","    fetchValue: function(ID) {","","        console.log(\"\\nQUICK.DB WARNING: 'fetchValue(ID).then(i => {})' is deprecated. Please use 'fetchObject(ID).then(i => {})\")","        console.log(\"QUICK.DB WARNING: 'fetchValue(ID).then(i => {})' is deprecated. Please use 'fetchObject(ID).then(i => {})\\n\")","","        const getInfo = new Promise((resolve) => {","","            let db;","            let response;","","            function createDb() { // Create Database Chain","                db = new sqlite3.Database('./database.sqlite', createTable)","            }","","            function createTable() { // Create table if it doesn't exist","                db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\", checkIfCreated)","            }","","            function checkIfCreated() { // Check if row exists w/ ID","","                db.get(`SELECT * FROM database WHERE ID = (?)`, ID, function(err, row) {","                    if (!row) { // Run if row not found...","                        insertRows()","                    }","                    else { // Run if row found...","                        response = row;","                        returnDb()","                    }","                })","","            }","","            function insertRows() { // Create an empty row w/ ID","                db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","            }","","            function returnDb() { // Return Row","                db.close();","                return resolve(response)","            }","","            createDb()","","        });","","        return getInfo","","    }","","    /* Disabled","        fetchTop: function(column, amount) { // Column == value, or text","","            const getInfo = new Promise((resolve) => {","","                // Return Statements","                if (column.toUpperCase() !== 'VALUE'.toUpperCase() || column.toUpperCase() !== 'TEXT'.toUpperCase()) {","                    console.log('Quick.db Error w/ fetchTop: Column can only be (VALUE, TEXT).')","                    return error('Quick.db Error w/ fetchTop: Column can only be (VALUE, TEXT).')","                }","","                if (isNaN(amount)) {","                    console.log('Quick.db Error w/ fetchTop: amount is not an integer.')","                    return error('Quick.db Error w/ fetchTop: amount is not an integer.')","                }","","","                let db;","                let response;","","                function createDb() { // Create Database Chain","                    db = new sqlite3.Database('./database.sqlite', createTable)","                }","","                function createTable() { // Create table if it doesn't exist","                    db.run(\"CREATE TABLE IF NOT EXISTS database (ID TEXT, value INTEGER, text TEXT)\", checkIfCreated)","                }","","                function checkIfCreated() { // Check if row exists w/ ID","","                    db.get(`SELECT * FROM database ORDER BY (?) DESC LIMIT (?)`, column, amount, function(err, rows) {","                        if (!rows) { // Run if row not found...","                            insertRows()","                        }","                        else { // Run if row found...","","                            function asyncFunction(item, callback) {","                                setTimeout(() => {","                                    console.log(`Parsed: ${item}`)","                                    callback();","                                }, 100)","                            }","","                            let requests = rows.forEach(item => {","                                return new Promise((resolve) => {","                                    asyncFunction(item, resolve);","                                });","                            })","","                            requests.then(() => {","                                response = rows","                                returnDb()","                            })","","                        }","                    })","","                }","","                function insertRows() { // Create an empty row w/ ID","                    db.run(\"INSERT INTO database (ID,value,text) VALUES (?,?,?)\", ID, 0, \"\", checkIfCreated)","                }","","                function returnDb() { // Return Row","                    db.close();","                    return resolve(response)","                }","","                createDb()","","            });","","            return getInfo","","        }","    */","","};",""]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":7,"column":55},"end":{"row":7,"column":55},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1511711607734}